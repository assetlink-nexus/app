/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Vault, VaultInterface } from "../../contracts/Vault";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_shares",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "borrow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_coinAddress",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "repay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDebt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_shares",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b620001d2565b600060019054906101000a900460ff16156200007b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000729062000175565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620000ec5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620000e39190620001b5565b60405180910390a15b565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b60006200015d602783620000ee565b91506200016a82620000ff565b604082019050919050565b6000602082019050818103600083015262000190816200014e565b9050919050565b600060ff82169050919050565b620001af8162000197565b82525050565b6000602082019050620001cc6000830184620001a4565b92915050565b61138480620001e26000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063b6b55f2511610071578063b6b55f251461018f578063c4d66de8146101bf578063c5ebeaec146101db578063cca3e8321461020b578063f2fde38b1461023b578063fc7b9c1814610257576100b4565b806318160ddd146100b95780632e1a7d4d146100d7578063371fd8e614610107578063715018a6146101375780638da5cb5b146101415780639cc7f7081461015f575b600080fd5b6100c1610275565b6040516100ce9190610d16565b60405180910390f35b6100f160048036038101906100ec9190610d62565b61027b565b6040516100fe9190610daa565b60405180910390f35b610121600480360381019061011c9190610d62565b6103e9565b60405161012e9190610daa565b60405180910390f35b61013f61049b565b005b6101496104af565b6040516101569190610e06565b60405180910390f35b61017960048036038101906101749190610d62565b6104d9565b6040516101869190610d16565b60405180910390f35b6101a960048036038101906101a49190610d62565b61059b565b6040516101b69190610d16565b60405180910390f35b6101d960048036038101906101d49190610e4d565b61071d565b005b6101f560048036038101906101f09190610d62565b61089d565b6040516102029190610daa565b60405180910390f35b61022560048036038101906102209190610e4d565b61094d565b6040516102329190610d16565b60405180910390f35b61025560048036038101906102509190610e4d565b610965565b005b61025f6109e8565b60405161026c9190610d16565b60405180910390f35b60665481565b600080606654606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102dc9190610e06565b602060405180830381865afa1580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d9190610e8f565b846103289190610eeb565b6103329190610f5c565b905061033e33846109ee565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161039b929190610f8d565b6020604051808303816000875af11580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de9190610fe2565b506001915050919050565b60006103f3610a61565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016104529392919061100f565b6020604051808303816000875af1158015610471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104959190610fe2565b50919050565b6104a3610a61565b6104ad6000610adf565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606654606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161053a9190610e06565b602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190610e8f565b846105869190610eeb565b6105909190610f5c565b905080915050919050565b6000806000606654036105b057829050610667565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161060b9190610e06565b602060405180830381865afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190610e8f565b6066548461065a9190610eeb565b6106649190610f5c565b90505b6106713382610ba5565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016106d09392919061100f565b6020604051808303816000875af11580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107139190610fe2565b5080915050919050565b60008060019054906101000a900460ff1615905080801561074e5750600160008054906101000a900460ff1660ff16105b8061077b575061075d30610c18565b15801561077a5750600160008054906101000a900460ff1660ff16145b5b6107ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b1906110c9565b60405180910390fd5b60016000806101000a81548160ff021916908360ff16021790555080156107f7576001600060016101000a81548160ff0219169083151502179055505b6107ff610c3b565b81606560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156108995760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610890919061113b565b60405180910390a15b5050565b60006108a7610a61565b606560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610904929190610f8d565b6020604051808303816000875af1158015610923573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109479190610fe2565b50919050565b60686020528060005260406000206000915090505481565b61096d610a61565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d3906111c8565b60405180910390fd5b6109e581610adf565b50565b60675481565b8060666000828254610a0091906111e8565b9250508190555080606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a5691906111e8565b925050819055505050565b610a69610c94565b73ffffffffffffffffffffffffffffffffffffffff16610a876104af565b73ffffffffffffffffffffffffffffffffffffffff1614610add576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad490611268565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8060666000828254610bb79190611288565b9250508190555080606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c0d9190611288565b925050819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c819061132e565b60405180910390fd5b610c92610c9c565b565b600033905090565b600060019054906101000a900460ff16610ceb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce29061132e565b60405180910390fd5b610cfb610cf6610c94565b610adf565b565b6000819050919050565b610d1081610cfd565b82525050565b6000602082019050610d2b6000830184610d07565b92915050565b600080fd5b610d3f81610cfd565b8114610d4a57600080fd5b50565b600081359050610d5c81610d36565b92915050565b600060208284031215610d7857610d77610d31565b5b6000610d8684828501610d4d565b91505092915050565b60008115159050919050565b610da481610d8f565b82525050565b6000602082019050610dbf6000830184610d9b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610df082610dc5565b9050919050565b610e0081610de5565b82525050565b6000602082019050610e1b6000830184610df7565b92915050565b610e2a81610de5565b8114610e3557600080fd5b50565b600081359050610e4781610e21565b92915050565b600060208284031215610e6357610e62610d31565b5b6000610e7184828501610e38565b91505092915050565b600081519050610e8981610d36565b92915050565b600060208284031215610ea557610ea4610d31565b5b6000610eb384828501610e7a565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ef682610cfd565b9150610f0183610cfd565b9250828202610f0f81610cfd565b91508282048414831517610f2657610f25610ebc565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f6782610cfd565b9150610f7283610cfd565b925082610f8257610f81610f2d565b5b828204905092915050565b6000604082019050610fa26000830185610df7565b610faf6020830184610d07565b9392505050565b610fbf81610d8f565b8114610fca57600080fd5b50565b600081519050610fdc81610fb6565b92915050565b600060208284031215610ff857610ff7610d31565b5b600061100684828501610fcd565b91505092915050565b60006060820190506110246000830186610df7565b6110316020830185610df7565b61103e6040830184610d07565b949350505050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006110b3602e83611046565b91506110be82611057565b604082019050919050565b600060208201905081810360008301526110e2816110a6565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b600061112561112061111b846110e9565b611100565b6110f3565b9050919050565b6111358161110a565b82525050565b6000602082019050611150600083018461112c565b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111b2602683611046565b91506111bd82611156565b604082019050919050565b600060208201905081810360008301526111e1816111a5565b9050919050565b60006111f382610cfd565b91506111fe83610cfd565b925082820390508181111561121657611215610ebc565b5b92915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611252602083611046565b915061125d8261121c565b602082019050919050565b6000602082019050818103600083015261128181611245565b9050919050565b600061129382610cfd565b915061129e83610cfd565b92508282019050808211156112b6576112b5610ebc565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611318602b83611046565b9150611323826112bc565b604082019050919050565b600060208201905081810360008301526113478161130b565b905091905056fea2646970667358221220c98d3d8598064701f3366ae7ba77b5c93eff56e35db76badbdc43d7480dac55464736f6c63430008120033";

type VaultConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VaultConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Vault__factory extends ContractFactory {
  constructor(...args: VaultConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Vault> {
    return super.deploy(overrides || {}) as Promise<Vault>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Vault {
    return super.attach(address) as Vault;
  }
  override connect(signer: Signer): Vault__factory {
    return super.connect(signer) as Vault__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VaultInterface {
    return new utils.Interface(_abi) as VaultInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Vault {
    return new Contract(address, _abi, signerOrProvider) as Vault;
  }
}
