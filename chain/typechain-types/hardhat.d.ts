/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AllowedList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AllowedList__factory>;
    getContractFactory(
      name: "EquityToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EquityToken__factory>;
    getContractFactory(
      name: "IAllowedList",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAllowedList__factory>;
    getContractFactory(
<<<<<<< HEAD
=======
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
>>>>>>> 1692cf02865171e08829b9ed2aa4cdb199b059db
      name: "StableCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableCoin__factory>;
    getContractFactory(
      name: "TOK",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TOK__factory>;
<<<<<<< HEAD
=======
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;
>>>>>>> 1692cf02865171e08829b9ed2aa4cdb199b059db

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AllowedList",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AllowedList>;
    getContractAt(
      name: "EquityToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EquityToken>;
    getContractAt(
      name: "IAllowedList",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAllowedList>;
    getContractAt(
<<<<<<< HEAD
=======
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
>>>>>>> 1692cf02865171e08829b9ed2aa4cdb199b059db
      name: "StableCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableCoin>;
    getContractAt(
      name: "TOK",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TOK>;
<<<<<<< HEAD
=======
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;
>>>>>>> 1692cf02865171e08829b9ed2aa4cdb199b059db

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
